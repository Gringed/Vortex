datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model accounts {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  parentId  String?   @db.ObjectId
  author    users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  replies   Post[]    @relation("comments")
  parent    Post?     @relation("comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keywords  String[]
  createdAt DateTime  @default(now())
  likes     Like[]
}

model users {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  username  String     @unique
  bio       String?
  link      String?
  image     String?
  address   Address?
  posts     Post[]
  isAdmin   Role       @default(USER)
  followers Follow[]   @relation("follower")
  followeds Follow[]   @relation("followed")
  likes     Like[]
  createdAt DateTime   @default(now())
  Account   accounts[]
  Session   sessions[]
}



model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}

enum Role {
  USER
  ADMIN
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  follower    users    @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed    users    @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)
}
